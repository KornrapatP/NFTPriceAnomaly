# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x_WgZmlYYBQRuHqNOD8Imx8gnJH6H6zs
"""

# from torchvision import models, transforms, utils, datasets
from curses.ascii import SP
import torch
import scipy
# from torch.utils.data import Dataset, DataLoader
# import torch.nn.functional as F
import os
import csv
import numpy as np
# import pandas as pd


def calR2(y_pred, y_target):
    u = np.mean(np.square(y_pred - y_target))
    return u

# alexnet = models.alexnet(pretrained=True)

# activation = {}
# def get_activation(name):
#     def hook(model, input, output):
#         activation[name] = output.detach()
#     return hook

# alexnet.classifier[4].register_forward_hook(get_activation('latent'))

# alexnet.eval()

# transform = transforms.Compose([
#  transforms.Resize(256),
#  transforms.CenterCrop(224), 
#  transforms.ToTensor(),
#  transforms.Normalize(
#  mean=[0.485, 0.456, 0.406],
#  std=[0.229, 0.224, 0.225]
#  )])


# NFTdataset = datasets.ImageFolder(root='COOLS', transform=transform)
# alexnet.eval()

# with open('imagenet_classes.txt') as f:
#   classes = [line.strip() for line in f.readlines()]


# latentRep = []

# for i in range(9941):
#     if i == 7363 or i == 7373:
#         continue
#     print(i)
#     sample = NFTdataset[i]
#     sample = torch.unsqueeze(sample[0],0)
#     out = alexnet(sample)
#     latentRep.append(activation['latent'].flatten())



# dataTensor = torch.stack(latentRep)

# U, S, V = torch.linalg.svd(dataTensor, full_matrices=False)
# print(U.shape, S.shape)

# scores = torch.matmul(U, torch.diag(S))

# top5Scores = scores[:, :5]
# print(top5Scores)
# torch.save(scores, 'COOLSscores.tensor')





t = torch.load('COOLSscores.tensor')
# print(t)
t = t[:,:5]
latentRep = {}
for i in range(9941):
    if i == 7363 or i == 7373:
        continue
    if i > 7373:
        ind=i-2
    elif i >7363:
        ind = i-1
    else:
        ind = i
    latentRep[i] = t[ind]

k = 25134
med = torch.zeros((k,1))
pSale = torch.zeros((k,1))
sale = torch.zeros((k,1))
design = torch.zeros((k, 5))
bPR = torch.zeros((k,1))
sPR = torch.zeros((k,1))
bDG = torch.zeros((k,1))
sDG = torch.zeros((k,1))
flag = torch.zeros((k,1))
with open('COOLStokensProcessedNx2flag2.csv', 'r') as inputFile:
    inputReader = csv.reader(inputFile)
    i = 0
    for row in inputReader:
        if row[0] == 'from' or int(row[2]) == 7363 or int(row[2]) == 7373:
            continue
        med[i][0] = float(row[11])
        pSale[i][0] = float(row[10])
        sale[i][0] = float(row[6])
        bPR[i][0] = float(row[12])
        sPR[i][0] = float(row[13])
        bDG[i][0] = float(row[14])
        sDG[i][0] = float(row[15])
        flag[i][0] = float(row[16])
        design[i] = latentRep[int(row[2])]
        i+=1
designMat = torch.cat((design, med, pSale, bPR, sPR, bDG, sDG, torch.ones(sDG.shape), flag), dim = 1)
# designMat = med
print(designMat.shape)
torch.save(designMat, 'designMat.tensor')
torch.save(sale, 'target.tensor')




designMat = torch.load('designMat.tensor').detach().numpy()
target = torch.load('target.tensor').detach().numpy()

# tup, r, _, _ = torch.linalg.lstsq(designMat, target)
tup, r, _, _ = np.linalg.lstsq(designMat[:, :-1], target, rcond = None)
print(designMat[:, -1].shape)
a = np.matmul(designMat[:, :-1], tup)
# print(a)
# print(target)
print('full, without flag', calR2(a, target))

target = target[designMat[:, 12] == 1]
designMat = designMat[designMat[:, 12] == 1]
a = np.matmul(designMat[:, :-1], tup)
# print(a)
# print(target)
print('flagged entries, without flag', calR2(a, target))


designMat = torch.load('designMat.tensor').detach().numpy()
target = torch.load('target.tensor').detach().numpy()

tup, r, _, _ = np.linalg.lstsq(designMat, target, rcond = None)
print(designMat.shape)
a = np.matmul(designMat, tup)
# print(a)
# print(target)
print('full, with flag', calR2(a, target))

target = target[designMat[:, 12] == 1]
designMat = designMat[designMat[:, 12] == 1]
a = np.matmul(designMat, tup)
# print(a)
# print(target)
print('flagged entries, with flag', calR2(a, target))
# 0.5927100479602814 for image, median1000, pSale, bPR, sPR, bDG, sDG
# 0.5924225151538849 for image, median1000, pSale
# 0.5910044610500336 for median1000, pSale
# 0.5821276307106018 for median1000

# for i in range(a.shape[0]):
#     print(a[i][0], target[i][0])
